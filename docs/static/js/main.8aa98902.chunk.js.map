{"version":3,"sources":["ToDoListItem.js","Input.js","Counter.js","App.js","serviceWorker.js","index.js"],"names":["ToDoListItem","_this$props","this","props","text","click","isDone","deleteEl","react_default","a","createElement","className","onClick","Component","Input","_this","type","placeholder","onKeyUp","event","keyupfunction","Counter","num","console","clear","App","state","todos","addToDoArray","key","newEntry","target","value","done","concat","Object","toConsumableArray","setState","toggleDone","index","newArray","slice","objectSpread","deleteListItem","counterToDo","filter","item","length","_this2","map","todoItem","ToDoListItem_ToDoListItem","Counter_Counter","Input_Input","createToDoList","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"4QAGqBA,+LACV,IAAAC,EACmCC,KAAKC,MAAvCC,EADDH,EACCG,KAAMC,EADPJ,EACOI,MAAOC,EADdL,EACcK,OAAQC,EADtBN,EACsBM,SAE7B,OACEC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAAA,QAAME,QAASP,EAAOM,UAAWL,EAAS,OAAS,IAChDF,GAEHI,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAeC,QAASL,GAA1C,gBATkCM,cCDrBC,mLACV,IAAAC,EAAAb,KACP,OACEM,EAAAC,EAAAC,cAAA,SACEM,KAAK,OACLC,YAAY,iBACZC,QAAS,SAAAC,GACPJ,EAAKZ,MAAMiB,cAAcD,aAPAN,aCCdQ,mLAEjB,OAAOb,EAAAC,EAAAC,cAAA,yBAAiBR,KAAKC,MAAMmB,YAFFT,aCGrCU,QAAQC,YA2EOC,6MAxEbC,MAAQ,CACNC,MAAO,MAGTC,aAAe,SAAAT,GACb,GAAkB,UAAdA,EAAMU,IAAiB,CACzB,IAAMC,EAAQ,CACZ,CAAE1B,KAAMe,EAAMY,OAAOC,MAAOC,MAAM,IADtBC,OAAAC,OAAAC,EAAA,EAAAD,CAETpB,EAAKW,MAAMC,QAEhBZ,EAAKsB,SAAS,CACZV,MAAOG,IAETX,EAAMY,OAAOC,MAAQ,OAIzBM,WAAa,SAAAC,GAAS,IACZZ,EAAUZ,EAAKW,MAAfC,MACFa,EAAQL,OAAAC,EAAA,EAAAD,CACTR,EAAMc,MAAM,EAAGF,IADNL,OAAA,CAAAC,OAAAO,EAAA,EAAAP,CAAA,GAEPR,EAAMY,GAFC,CAEON,MAAON,EAAMY,GAAON,QAF3BE,OAAAC,EAAA,EAAAD,CAGTR,EAAMc,MAAMF,EAAQ,KAEzBxB,EAAKsB,SAAS,CACZV,MAAOa,OAIXG,eAAiB,SAAAJ,GAAS,IAChBZ,EAAUZ,EAAKW,MAAfC,MACFa,EAAQL,OAAAC,EAAA,EAAAD,CAAOR,EAAMc,MAAM,EAAGF,IAAtBL,OAAAC,OAAAC,EAAA,EAAAD,CAAiCR,EAAMc,MAAMF,EAAQ,KACnExB,EAAKsB,SAAS,CACZV,MAAOa,OAIXI,YAAc,WACZ,OAAO7B,EAAKW,MAAMC,MAAMkB,OAAO,SAAAC,GAAI,OAAIA,EAAKb,OAAMc,wFAGnC,IAAAC,EAAA9C,KACf,OAAOA,KAAKwB,MAAMC,MAAMsB,IAAI,SAACC,EAAUX,GAAX,OAC1B/B,EAAAC,EAAAC,cAACyC,EAAD,CACEtB,IAAKU,EACLjC,OAAQ4C,EAASjB,KACjB7B,KAAM8C,EAAS9C,KACfC,MAAO,kBAAM2C,EAAKV,WAAWC,IAC7BhC,SAAU,kBAAMyC,EAAKL,eAAeJ,yCAMxC,OACE/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACfH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aACdH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAC0C,EAAD,CAAS9B,IAAKpB,KAAK0C,iBAErBpC,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAC2C,EAAD,CAAOjC,cAAelB,KAAK0B,gBAE7BpB,EAAAC,EAAAC,cAAA,WAASC,UAAU,iBACjBH,EAAAC,EAAAC,cAAA,UAAKR,KAAKoD,4BAlEJzC,aCIZ0C,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB5C,QACfsC,UAAUC,cAAcQ,YAI1BlD,QAAQmD,IACN,gHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlB7C,QAAQmD,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,UAO5BS,MAAM,SAAAC,GACLvD,QAAQuD,MAAM,4CAA6CA,KC1FjEC,IAASC,OAAOxE,EAAAC,EAAAC,cAACuE,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,GAAwB5B,OAAOC,SAAS4B,MACpDC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,OAAQ,WAC9B,IAAM1B,EAAK,GAAA5B,OAAMmD,GAAN,sBAEP9B,GAgEV,SAAiCO,EAAOC,GAEtC0B,MAAM3B,GACHK,KAAK,SAAAuB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,KAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,KAAK,WAC7BV,OAAOC,SAASwC,aAKpBrC,EAAgBC,EAAOC,KAG1Bc,MAAM,WACLtD,QAAQmD,IACN,mEArFAyB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,KAAK,WACjC5C,QAAQmD,IACN,+GAMJb,EAAgBC,EAAOC,MCvC/BE","file":"static/js/main.8aa98902.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './ToDoListItem.css'\n\nexport default class ToDoListItem extends Component {\n  render() {\n    const { text, click, isDone, deleteEl } = this.props\n\n    return (\n      <li className=\"listItem\">\n        <span onClick={click} className={isDone ? 'done' : ''}>\n          {text}\n        </span>\n        <button className=\"deleteButton\" onClick={deleteEl}>\n          &times;\n        </button>\n      </li>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class Input extends Component {\n  render() {\n    return (\n      <input\n        type=\"text\"\n        placeholder=\"Add your To Do\"\n        onKeyUp={event => {\n          this.props.keyupfunction(event)\n        }}\n      />\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport './App.css'\n\nexport default class Counter extends Component {\n  render() {\n    return <h2>To Do done: {this.props.num}</h2>\n  }\n}\n","import React, { Component } from 'react'\nimport './App.css'\nimport ToDoListItem from './ToDoListItem'\nimport Input from './Input'\nimport Counter from './Counter'\n\nconsole.clear()\n\nclass App extends Component {\n  state = {\n    todos: []\n  }\n\n  addToDoArray = event => {\n    if (event.key === 'Enter') {\n      const newEntry = [\n        { text: event.target.value, done: false },\n        ...this.state.todos\n      ]\n      this.setState({\n        todos: newEntry\n      })\n      event.target.value = ''\n    }\n  }\n\n  toggleDone = index => {\n    const { todos } = this.state\n    const newArray = [\n      ...todos.slice(0, index),\n      { ...todos[index], done: !todos[index].done },\n      ...todos.slice(index + 1)\n    ]\n    this.setState({\n      todos: newArray\n    })\n  }\n\n  deleteListItem = index => {\n    const { todos } = this.state\n    const newArray = [...todos.slice(0, index), ...todos.slice(index + 1)]\n    this.setState({\n      todos: newArray\n    })\n  }\n\n  counterToDo = () => {\n    return this.state.todos.filter(item => item.done).length\n  }\n\n  createToDoList() {\n    return this.state.todos.map((todoItem, index) => (\n      <ToDoListItem\n        key={index}\n        isDone={todoItem.done}\n        text={todoItem.text}\n        click={() => this.toggleDone(index)}\n        deleteEl={() => this.deleteListItem(index)}\n      />\n    ))\n  }\n\n  render() {\n    return (\n      <div className=\"layout\">\n        <div className=\"styleEl\" />\n        <main className=\"container\">\n          <header>\n            <Counter num={this.counterToDo()} />\n          </header>\n          <section>\n            <Input keyupfunction={this.addToDoArray} />\n          </section>\n          <section className=\"listContainer\">\n            <ul>{this.createToDoList()}</ul>\n          </section>\n        </main>\n      </div>\n    )\n  }\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}